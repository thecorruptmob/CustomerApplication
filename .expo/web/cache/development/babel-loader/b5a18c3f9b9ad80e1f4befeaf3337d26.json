{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Dell XPS\\\\Downloads\\\\fypfypfyp\\\\app\\\\screens\\\\LoginScreen.js\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport * as Yup from \"yup\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Screen from \"../components/Screen\";\nimport { ErrorMessage, Form, FormField, SubmitButton } from \"../components/forms\";\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\nimport colors from \"../config/colors\";\nvar validationSchema = Yup.object().shape({\n  phone: Yup.string().required().min(13).max(13).label(\"Phone\"),\n  password: Yup.string().required().min(8).max(15).label(\"Password\")\n});\n\nfunction LoginScreen() {\n  var auth = useAuth();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loginFailed = _useState2[0],\n      setLoginFailed = _useState2[1];\n\n  var handleSubmit = function handleSubmit(_ref) {\n    var phone, password, result;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            phone = _ref.phone, password = _ref.password;\n            Keyboard.dismiss();\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(authApi.login(phone, password));\n\n          case 4:\n            result = _context.sent;\n\n            if (result.ok) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", setLoginFailed(true));\n\n          case 7:\n            setLoginFailed(false);\n            auth.logIn(result.data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, {\n    style: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../assets/logo-red.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), React.createElement(Form, {\n    initialValues: {\n      phone: \"+92\",\n      password: \"\"\n    },\n    onSubmit: handleSubmit,\n    validationSchema: validationSchema,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, React.createElement(ErrorMessage, {\n    error: \"Invalid phone and/or password.\",\n    visible: loginFailed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"phone\",\n    keyboardType: \"number-pad\",\n    name: \"phone\",\n    placeholder: \"Phone\",\n    maxLength: 13,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), React.createElement(FormField, {\n    autoCapitalize: \"none\",\n    autoCorrect: false,\n    icon: \"lock\",\n    name: \"password\",\n    placeholder: \"Password\",\n    secureTextEntry: true,\n    textContentType: \"password\",\n    maxLength: 15,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), React.createElement(SubmitButton, {\n    title: \"Login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.white,\n    padding: 20\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    alignSelf: \"center\",\n    marginTop: 50,\n    marginBottom: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/Dell XPS/Downloads/fypfypfyp/app/screens/LoginScreen.js"],"names":["React","useState","Yup","Screen","ErrorMessage","Form","FormField","SubmitButton","authApi","useAuth","colors","validationSchema","object","shape","phone","string","required","min","max","label","password","LoginScreen","auth","loginFailed","setLoginFailed","handleSubmit","Keyboard","dismiss","login","result","ok","logIn","data","styles","container","logo","require","StyleSheet","create","backgroundColor","white","padding","width","height","alignSelf","marginTop","marginBottom"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, Image } from \"react-native\";\nimport * as Yup from \"yup\";\nimport { Keyboard } from \"react-native\";\n\nimport Screen from \"../components/Screen\";\nimport {\n  ErrorMessage,\n  Form,\n  FormField,\n  SubmitButton,\n} from \"../components/forms\";\nimport authApi from \"../api/auth\";\nimport useAuth from \"../auth/useAuth\";\nimport colors from \"../config/colors\";\n\nconst validationSchema = Yup.object().shape({\n  phone: Yup.string().required().min(13).max(13).label(\"Phone\"),\n  password: Yup.string().required().min(8).max(15).label(\"Password\"),\n});\n\nfunction LoginScreen() {\n  const auth = useAuth();\n  const [loginFailed, setLoginFailed] = useState(false);\n\n  const handleSubmit = async ({ phone, password }) => {\n    Keyboard.dismiss();\n    const result = await authApi.login(phone, password);\n    if (!result.ok) return setLoginFailed(true);\n    setLoginFailed(false);\n    auth.logIn(result.data);\n  };\n\n  return (\n    <Screen style={styles.container}>\n      <Image style={styles.logo} source={require(\"../assets/logo-red.png\")} />\n\n      <Form\n        initialValues={{ phone: \"+92\", password: \"\" }}\n        onSubmit={handleSubmit}\n        validationSchema={validationSchema}\n      >\n        <ErrorMessage\n          error=\"Invalid phone and/or password.\"\n          visible={loginFailed}\n        />\n        <FormField\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          icon=\"phone\"\n          keyboardType=\"number-pad\"\n          name=\"phone\"\n          placeholder=\"Phone\"\n          maxLength={13}\n        />\n        <FormField\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          icon=\"lock\"\n          name=\"password\"\n          placeholder=\"Password\"\n          secureTextEntry\n          textContentType=\"password\"\n          maxLength={15}\n        />\n        <SubmitButton title=\"Login\" />\n      </Form>\n    </Screen>\n  );\n}\n\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: colors.white,\n    padding: 20,\n  },\n  logo: {\n    width: 80,\n    height: 80,\n    alignSelf: \"center\",\n    marginTop: 50,\n    marginBottom: 20,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}